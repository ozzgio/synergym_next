name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: "Run RuboCop"
        run: bundle exec rubocop

  test:
    name: "Test"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: synergym_test
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: "Setup database"
        env:
          RAILS_ENV: test
          DATABASE_URL: "postgres://postgres@localhost:5432/synergym_test"
        run: |
          bundle exec rails db:test:prepare
      - name: "Run tests"
        env:
          RAILS_ENV: test
          DATABASE_URL: "postgres://postgres@localhost:5432/synergym_test"
          COVERAGE: "true"
        run: |
          bundle exec rails test
      - name: "Check coverage percentage"
        run: |
          if [ -f "coverage/coverage.xml" ]; then
          COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' coverage/coverage.xml | sed 's/line-rate="//' | sed 's/"//' | awk '{printf "%.0f", $1 * 100}')
          echo "Coverage: ${COVERAGE_PERCENT}%"
          THRESHOLD=80
          if (( $(echo "${COVERAGE_PERCENT} < ${THRESHOLD}" | bc -l) )); then
          echo "⚠️ Coverage ${COVERAGE_PERCENT}% is below threshold ${THRESHOLD}%, but CI will not fail."
          else
            echo "✅ Coverage ${COVERAGE_PERCENT}% meets threshold ${THRESHOLD}%"
          fi
          else
          echo "⚠️ No coverage report found, CI will not fail."
          fi
      - name: "Upload coverage reports"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

  security:
    name: "Security"
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: "Setup Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: "Audit Ruby dependencies"
        run: |
          gem install bundler-audit
          bundle audit check --update
      - name: "Run Brakeman"
        run: |
          bundle exec brakeman --no-pager --exit-on-warn --format sarif > brakeman-report.sarif
      - name: "Upload Brakeman report"
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: brakeman-report.sarif
        if: false
      
  validate:
    name: "Validate"
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: "Validate VERSION file"
        run: |
          if [[ ! -f "VERSION" ]]; then
            echo "VERSION file not found"
            exit 1
          fi
          if ! grep -qE "^[0-9]+\.[0-9]+\.[0-9]+$" VERSION; then
            echo "Invalid VERSION format"
            exit 1
          fi
      - name: "Validate CHANGELOG"
        run: |
          if [[ ! -f "CHANGELOG.md" ]]; then
            echo "CHANGELOG.md not found"
            exit 1
          fi
          if ! grep -qE "^# Changelog" CHANGELOG.md; then
            echo "CHANGELOG.md missing main heading"
            exit 1
          fi
          if ! grep -qE "^## \\[Unreleased\\]" CHANGELOG.md; then
            echo "CHANGELOG.md missing [Unreleased] section"
            exit 1
          fi
          VERSION=$(cat VERSION)
          if ! grep -qE "^## \\[$VERSION\\] - [0-9]{4}-[0-9]{2}-[0-9]{2}" CHANGELOG.md; then
            echo "CHANGELOG.md missing entry for version $VERSION"
            exit 1
          fi
      - name: "Validate commit messages"
        run: |
          git fetch origin main
          COMMITS=$(git rev-list --no-merges origin/main..HEAD)
          for COMMIT in $COMMITS; do
            MESSAGE=$(git log -1 --pretty=format:%s $COMMIT)
            if ! echo "$MESSAGE" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .{1,50}"; then
              echo "Invalid commit message format: $MESSAGE"
              exit 1
            fi
          done
